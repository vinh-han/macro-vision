// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session_queries.sql

package database

import (
	"context"
	"time"
)

const get_session = `-- name: Get_session :one
select id, username, token, expires_at, date_created
from sessions
where token = ?
`

func (q *Queries) Get_session(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, get_session, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Token,
		&i.ExpiresAt,
		&i.DateCreated,
	)
	return i, err
}

const insert_session = `-- name: Insert_session :one
;

insert into sessions(username, token, expires_at, date_created)
values (?,?,?,?)
returning id, username, token, expires_at, date_created
`

type Insert_sessionParams struct {
	Username    string
	Token       string
	ExpiresAt   time.Time
	DateCreated time.Time
}

func (q *Queries) Insert_session(ctx context.Context, arg Insert_sessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, insert_session,
		arg.Username,
		arg.Token,
		arg.ExpiresAt,
		arg.DateCreated,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Token,
		&i.ExpiresAt,
		&i.DateCreated,
	)
	return i, err
}

const remove_session = `-- name: Remove_session :exec
delete from sessions
where token = ?
`

func (q *Queries) Remove_session(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, remove_session, token)
	return err
}
